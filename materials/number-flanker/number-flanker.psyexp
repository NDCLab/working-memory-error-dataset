<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '1', 'run': '1', 'event': '1'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="sys-2-asus" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[-.3,-.3,-.3]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="number-flanker" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial"/>
    <Routine name="JS_code">
      <CodeComponent name="JScode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="// for our own functions we need these specified in the global space &amp;#10;// so these are defined in the &quot;Before experiment&quot; tab&amp;#10;// linspace (this will be used in place of numpy.linspace for picking ISI)&amp;#10;&amp;#10;function linspace(a,b,n) {&amp;#10;    if(typeof n === &quot;undefined&quot;) n = Math.max(Math.round(b-a)+1,1);&amp;#10;    if(n&lt;2) { return n===1?[a]:[]; }&amp;#10;    var i,ret = Array(n);&amp;#10;    n--;&amp;#10;    for(i=n;i&gt;=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }&amp;#10;    return ret;&amp;#10;}" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// shuffle is push in JS so defining shuffle for our JS experiment code&amp;#10;shuffle = util.shuffle;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="JScode" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="setup">
      <CodeComponent name="setup_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#import serial #used for sending eeg triggers&amp;#10;#import time #indirerctly used for sending eeg triggers (how long to wait before clearing port)&amp;#10;&amp;#10;#win.mouseVisible = False #hide mouse cursor&amp;#10;#port = serial.Serial('COM3') # Open specified serial port (COM4) for sending eeg triggers to   &amp;#10;#PulseWidth = 0.002 #how long to wait before clearing port after sending trigger (2 ms is sufficient at 1000 hz sampling rate)&amp;#10;#port.write([0x00]) #clear serial port&amp;#10;#time.sleep(PulseWidth) #wait PulseWidth amount of time before doing anything else" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False #hide mouse cursor" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="win.mouseVisible = True #make the mouse cursor visable again&amp;#10;#port.write([0xFF]) #set port values back to default state (FF)&amp;#10;#time.sleep(PulseWidth) #wait PulseWidth amount of time before doing anything else&amp;#10;#port.close() #close port opened at start of exp" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="psychoJS.window.mouseVisible = true;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setup_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="config_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;used_letters = [] # letters used in WM and flanker trials (to prevent repeates in WM and flanker within supertrial)&amp;#10;used_letters_fl = [] # letters used in flanker trials (to prevent repeats within flanker trials)&amp;#10;shown_letters = [] # exact letters shown in WM (i.e., considered lower-/uppercase)&amp;#10;&amp;#10;CROSS_Y = -0.73 # position of fix cross (to easily adjust when switch from macbook to asus), for asus should be -0.71&amp;#10;&amp;#10;# initialize thresholds for flanker and WM practice&amp;#10;#WM_THRESH = 0.7&amp;#10;FL_THRESH = 0.7&amp;#10;&amp;#10;# initialize trial, block counters and accuracy&amp;#10;numCorr_wm = 0&amp;#10;trialNum_wm = 0&amp;#10;numCorr_fl = 0&amp;#10;trialNum_fl = 0&amp;#10;blockCounter = 0&amp;#10;trialNum = 0&amp;#10;accuracy = 0&amp;#10;numCorr = 0&amp;#10;blockAcc_wm = 0&amp;#10;blockAcc_fl = 0&amp;#10;&amp;#10;# initialize the thisISI variable used for all ISI&amp;#10;thisISI = 0&amp;#10;&amp;#10;NUMBERS = [&amp;#10;'1', '2', '3',&amp;#10;'4', '5', '6',&amp;#10;'7', '8', '9',&amp;#10;'0'&amp;#10;]&amp;#10;&amp;#10;NUMBERS_LARGE = ['6', '7', '8', '9',]&amp;#10;NUMBERS_SMALL = ['1', '2', '3', '4',]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;used_letters = [];&amp;#10;used_letters_fl = [];&amp;#10;shown_letters = [];&amp;#10;CROSS_Y = (- 0.73);&amp;#10;FL_THRESH = 0.7;&amp;#10;numCorr_wm = 0;&amp;#10;trialNum_wm = 0;&amp;#10;numCorr_fl = 0;&amp;#10;trialNum_fl = 0;&amp;#10;blockCounter = 0;&amp;#10;trialNum = 0;&amp;#10;accuracy = 0;&amp;#10;numCorr = 0;&amp;#10;blockAcc_wm = 0;&amp;#10;blockAcc_fl = 0;&amp;#10;thisISI = 0;&amp;#10;NUMBERS = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;];&amp;#10;NUMBERS_LARGE = [&quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;];&amp;#10;NUMBERS_SMALL = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="config_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructMiddle">
      <TextComponent name="welcome_text_2">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="welcome_text_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to the Number Alert Game! This game will require you to quickly respond to numbers based on whether they are lesser or greater than 5.&amp;#10;&amp;#10;During this game, five numbers between 1-9 will appear at a time. They will be quickly flashed on the screen. Your goal is to respond to the MIDDLE number, and to respond as quickly as you can without making mistakes.&amp;#10;&amp;#10;If the MIDDLE number is lesser than 5, use your left hand to press the left button. If the MIDDLE number is greater than 5, use your right hand to press the right button.&amp;#10;&amp;#10;Press the right button to continue" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="height" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_7">
        <Param val="'8'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_7" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructLeft">
      <TextComponent name="instructLeft_text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instructLeft_text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Below, the MIDDLE number is lesser than 5, so you would respond by pressing the left button with your left hand.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press the left button to continue" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instructLeft_numbers2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instructLeft_numbers2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="11111" valType="str" updates="set every repeat" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="prac_highlight_circle_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="yellow" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="yellow" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="prac_highlight_circle_2" valType="code" updates="None" name="name"/>
        <Param val="0.3" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, 0.045)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="insructLeft_keyResp_2">
        <Param val="'1'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="insructLeft_keyResp_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructRight">
      <TextComponent name="instrucRight_text_2">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instrucRight_text_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Below, the MIDDLE number is greater than 5, so you would respond by pressing the right button with your right hand.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press the right button to continue" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instructRight_numbers2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instructRight_numbers2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="66666" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="prac_highlight_circle_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="yellow" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="yellow" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="prac_highlight_circle_4" valType="code" updates="None" name="name"/>
        <Param val="0.3" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, 0.045)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="instructRight_keyResp_2">
        <Param val="'8'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instructRight_keyResp_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructionLeft">
      <TextComponent name="instrucRight_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instrucRight_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Sometimes the MIDDLE number will be different from the other numbers. However, your goal is to always respond to the MIDDLE number.&amp;#10;&amp;#10;Below, the MIDDLE number is lesser than 5, so you would respond by pressing the left button with your left hand.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press the left button to continue" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instructRight_numbers2_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instructRight_numbers2_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="77277" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="prac_highlight_circle">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="yellow" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="yellow" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="prac_highlight_circle" valType="code" updates="None" name="name"/>
        <Param val="0.3" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, 0.045)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="instructRight_keyResp">
        <Param val="'1'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instructRight_keyResp" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructionRight">
      <TextComponent name="instructInconRight_text_2">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instructInconRight_text_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Below, the MIDDLE number is greater than 5, so you would respond by pressing the right button with your right hand.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press the right button to continue" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="instructInconRight_letters2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="instructInconRight_letters2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="33833" valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <PolygonComponent name="prac_highlight_circle_8">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="yellow" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="yellow" valType="color" updates="constant" name="lineColor"/>
        <Param val="5" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="prac_highlight_circle_8" valType="code" updates="None" name="name"/>
        <Param val="0.3" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(0.05, 0.045)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="instructInconRight_keyResp_2">
        <Param val="'8'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instructInconRight_keyResp_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="respond_onceInstruct">
      <TextComponent name="respond_once_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="respond_once_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Each time you see the numbers appear, respond as quickly as you can without making mistakes.&amp;#10;&amp;#10;However, only respond once each time you see the numbers appear. Even if you think you made the wrong response, do not respond again until you see the next set of numbers appear. Also, please do not to say the numbers out loud. &amp;#10;&amp;#10;Press the right button to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_8">
        <Param val="'8'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_8" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="eeg_trigger_check">
      <CodeComponent name="triggerCheck_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#initialize usb connected variable&amp;#10;usbConnected = 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="try {&amp;#10;    port.close();&amp;#10;    port.open();&amp;#10;    usbConnected = 1;&amp;#10;    continueRoutine = false;&amp;#10;} catch(e) {&amp;#10;    usbConnected = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#(re)open trigger port. This is done in case the connection failed,&amp;#10;#in which case triggers will no longer be sent until the port is reopened.&amp;#10;&amp;#10;#At start of routine, we try to close/open the port. This will usually be&amp;#10;#succesful, causing us to end the routine altogether. However, it will fail if &amp;#10;#the usb is unplugged. In this latter case, the routine will then run code each&amp;#10;#frame to constantly check for the usb being plugged back in, before continuing.&amp;#10;&amp;#10;try: &amp;#10;#if usb connected, port will close/open and routine will end&amp;#10;    port.close()&amp;#10;    port.open()&amp;#10;    usbConnected = 1 #if successful, set usbConnectd to 1&amp;#10;    continueRoutine = False #if successful, end the routine&amp;#10;&amp;#10;except: #if port close/open fails, then set usbConnected to 0. Routine will loop each frame until fixed.&amp;#10;    usbConnected = 0 #if failure, set usbConnected to 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#if the usb is not connected, then keep trying to open port to determine when it has been reconnected.&amp;#10;if usbConnected == 0:&amp;#10;    &amp;#10;    try: &amp;#10;        #if usb connected, port will close/open and routine will end&amp;#10;        port.close()&amp;#10;        port.open()&amp;#10;        usbConnected = 1 #if successful, set usbConnectd to 1&amp;#10;        #send trigger to indicate that there was a connection issue that is now resolved&amp;#10;        port.write([0x63]) #hexcode = 99; eeg trigger sent&amp;#10;        time.sleep(PulseWidth) #how long to wait before clearing trigger port&amp;#10;        port.write([0x00]) #clear trigger port by sending hexcode = 0&amp;#10;        #if successful, end the routine&amp;#10;        continueRoutine = False&amp;#10;    &amp;#10;    except: #if usb not connected, routine will continue (keep checking port and keep showing message)&amp;#10;        usbConnected = 0 #if failure, set usbConnectd to 0&amp;#10;        time.sleep(0.5) #wait .5 secs before checking again, to not overload the system" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((usbConnected === 0)) {&amp;#10;    try {&amp;#10;        port.close();&amp;#10;        port.open();&amp;#10;        usbConnected = 1;&amp;#10;        port.write([99]);&amp;#10;        time.sleep(PulseWidth);&amp;#10;        port.write([0]);&amp;#10;        continueRoutine = false;&amp;#10;    } catch(e) {&amp;#10;        usbConnected = 0;&amp;#10;        time.sleep(0.5);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="triggerCheck_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="triggerIssue_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="triggerIssue_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="EEG EQUIPMENT ISSUE: please ring bell for experimenter" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="prac_blockReminders">
      <TextComponent name="prac_blockText">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="prac_blockText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, .3)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Practice" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="prac_reminder_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="prac_reminder_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Respond as quickly as you can without making mistakes. Only respond once each time you see the numbers appear. Always respond whether the MIDDLE number is lesser or greater than 5.&amp;#10;&amp;#10;Remember not to say any of the numbers out loud. To get ready, rest your thumbs on the right and left buttons.&amp;#10;&amp;#10;&amp;#10;Experimenter: press key to continue" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_9">
        <Param val="'c'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_9" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prac_initFixation">
      <CodeComponent name="prac_endTask_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ISIRange = np.linspace(2600, 3000, 400);&amp;#10;util.shuffle(ISIRange);&amp;#10;thisISI = (ISIRange[0] / 1000);&amp;#10;used_letters = [];&amp;#10;shown_letters = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# make range from a to b in n stepsizes&amp;#10;ISIRange = np.linspace(2600, 3000, 400)&amp;#10;&amp;#10;# picking from a shuffled array is easier for random selection in JS&amp;#10;shuffle(ISIRange)&amp;#10;thisISI = ISIRange[0]/1000 # the first item of the shuffled array &amp;#10;&amp;#10;# empty lists of used letters&amp;#10;used_letters = []&amp;#10;shown_letters = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_endTask_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="initFixation_img_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="img/fixationCross.png" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="initFixation_img_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CROSS_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(.24, .24)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="prac_stimRoutine">
      <CodeComponent name="prac_flanker_numbers_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# take flanker letter and add to used flanker letters&amp;#10;flanker_stim_large = NUMBERS_LARGE.copy()&amp;#10;flanker_stim_small = NUMBERS_SMALL.copy()&amp;#10;shuffle(flanker_stim_large)&amp;#10;shuffle(flanker_stim_small)&amp;#10;&amp;#10;# create flanker stimuli based on the congruency and case&amp;#10;if congruent == 1 and target == &quot;large&quot;:&amp;#10;    flanker_stim = &quot;{}&quot;.format(flanker_stim_large[0]*5)&amp;#10;elif congruent == 1 and target == &quot;small&quot;:&amp;#10;    flanker_stim = &quot;{}&quot;.format(flanker_stim_small[0]*5)&amp;#10;elif congruent == 0 and target == &quot;large&quot;:&amp;#10;    flanker_stim = &quot;{}{}{}&quot;.format(flanker_stim_small[0]*2,&amp;#10;    flanker_stim_large[0], flanker_stim_small[0]*2)&amp;#10;elif congruent == 0 and target == &quot;small&quot;:&amp;#10;    flanker_stim = &quot;{}{}{}&quot;.format(flanker_stim_large[0]*2,&amp;#10;    flanker_stim_small[0], flanker_stim_large[0]*2)&amp;#10;else: flanker_stim = &quot;error&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="prac_trial_loop.addData(&quot;prac_flanker_stim&quot;, flanker_stim);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# write flanker stimuli to data&amp;#10;prac_trial_loop.addData('prac_flanker_stim',&amp;#10;flanker_stim)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_flanker_numbers_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="prac_isi_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ISIRange = np.linspace(1300, 1800, 500);&amp;#10;util.shuffle(ISIRange);&amp;#10;thisISI = (ISIRange[0] / 1000);&amp;#10;prac_trial_loop.addData(&quot;prac_flanker_ISI&quot;, thisISI);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# pick the ISI for the next routine&amp;#10;# for the online version, this code component should be set to 'both' to remove the 'np'&amp;#10;# at the start of np.linspace (this is a python library JS won't know what to call. &amp;#10;&amp;#10;# make range from a to b in n stepsizes&amp;#10;ISIRange = np.linspace(1300, 1800, 500)&amp;#10;&amp;#10;# picking from a shuffled array is easier for random selection in JS&amp;#10;shuffle(ISIRange)&amp;#10;thisISI = ISIRange[0]/1000 # the first item of the shuffled array &amp;#10;&amp;#10;# save this ISI to our output file&amp;#10;prac_trial_loop.addData('prac_flanker_ISI', thisISI)&amp;#10;&amp;#10;# show in console for debugging&amp;#10;#print('thisISI: ', thisISI)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_isi_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="prac_flanker_text_stim">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="prac_flanker_text_stim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$flanker_stim" valType="str" updates="set every repeat" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="prac_fixImg">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="img/fixationCross.png" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="prac_fixImg" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CROSS_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(.24, .24)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="prac_stim_keyResp">
        <Param val="'1','8'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="prac_stim_keyResp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="all keys" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="prac_accuracy_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trialNum = (trialNum + 1);&amp;#10;if (prac_stim_keyResp.keys) {&amp;#10;    if ((prac_stim_keyResp.keys[0] === &quot;1&quot;)) {&amp;#10;        if ((target === &quot;small&quot;)) {&amp;#10;            accuracy = 1;&amp;#10;            numCorr = (numCorr + 1);&amp;#10;        } else {&amp;#10;            if ((target === &quot;large&quot;)) {&amp;#10;                accuracy = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((prac_stim_keyResp.keys[0] === &quot;8&quot;)) {&amp;#10;            if ((target === &quot;large&quot;)) {&amp;#10;                accuracy = 1;&amp;#10;                numCorr = (numCorr + 1);&amp;#10;            } else {&amp;#10;                if ((target === &quot;small&quot;)) {&amp;#10;                    accuracy = 0;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((! prac_stim_keyResp.keys)) {&amp;#10;        accuracy = 0;&amp;#10;    }&amp;#10;}&amp;#10;prac_trial_loop.addData(&quot;prac_flanker_accuracy&quot;, accuracy);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trialNum = trialNum + 1 #iterate trial number for this block&amp;#10;&amp;#10;&amp;#10;if prac_stim_keyResp.keys: #if at least one response was made this trial&amp;#10;    if prac_stim_keyResp.keys[0] == '1': #if the FIRST button pressed was a '1'&amp;#10;        if target == 'small': #if a left target stim was shown this trial&amp;#10;            accuracy = 1 #mark this trial as correct&amp;#10;            numCorr = numCorr +1 #iterate number of correct responses for this supertrial&amp;#10;        elif target == 'large': #if a right target stim was shown this trial&amp;#10;            accuracy = 0 #mark this trial as an error&amp;#10;    elif prac_stim_keyResp.keys[0] == '8': #if the FIRST button pressed was a '8'&amp;#10;        if target == 'large': #if a right target stim was shown this trial&amp;#10;            accuracy = 1 #mark this trial as correct&amp;#10;            numCorr = numCorr +1 #iterate number of correct responses for this supertrial&amp;#10;        elif target == 'small': #if a left target stim was shown this trial&amp;#10;            accuracy = 0 #mark this trial as an error&amp;#10;&amp;#10;elif not prac_stim_keyResp.keys: # if no response was made&amp;#10;    accuracy = 0&amp;#10;            &amp;#10;# save this trial's accuracy to our output file&amp;#10;prac_trial_loop.addData('prac_flanker_accuracy', accuracy)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_accuracy_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="prac_stimTrigger_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="stimTriggerSent = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#set stimTriggerSent to false at the start of the trial. this way&amp;#10;#when the stimulus is shown, we can change it to True. This variable&amp;#10;#is used to ensure we only throw the stimulus EEG trigger once.&amp;#10;stimTriggerSent = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#the first if statement below ensures that the subsequent if statements (and throwing of triggers)&amp;#10;#only occurs once per trial. That is, only when the stimulus is presented (.status = STARTED) and&amp;#10;#stimTriggerSent is still False. Once a trigger is sent, we change stimTriggerSent to True so that &amp;#10;#the stimulus eeg trigger will not be sent again for this trial&amp;#10;if prac_centerImg.status == STARTED and not stimTriggerSent:&amp;#10;    if stimNum == 1: #code denoting which stimulus array was sent (from excel file)&amp;#10;        stimTriggerSent = True #switch stimTriggerSent to True so that the stimulus eeg trigger will not be sent again this trial&amp;#10;        port.write([0x01]) #hexcode = 1; eeg trigger sent&amp;#10;        time.sleep(PulseWidth) #how long to wait before clearing trigger port&amp;#10;        port.write([0x00]) #clear trigger port by sending hexcode = 0&amp;#10;    elif stimNum == 2:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x02])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 3:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x03])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 4:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x04])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((prac_centerImg.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimTriggerSent))) {&amp;#10;    if ((stimNum === 1)) {&amp;#10;        stimTriggerSent = true;&amp;#10;        port.write([1]);&amp;#10;        time.sleep(PulseWidth);&amp;#10;        port.write([0]);&amp;#10;    } else {&amp;#10;        if ((stimNum === 2)) {&amp;#10;            stimTriggerSent = true;&amp;#10;            port.write([2]);&amp;#10;            time.sleep(PulseWidth);&amp;#10;            port.write([0]);&amp;#10;        } else {&amp;#10;            if ((stimNum === 3)) {&amp;#10;                stimTriggerSent = true;&amp;#10;                port.write([3]);&amp;#10;                time.sleep(PulseWidth);&amp;#10;                port.write([0]);&amp;#10;            } else {&amp;#10;                if ((stimNum === 4)) {&amp;#10;                    stimTriggerSent = true;&amp;#10;                    port.write([4]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_stimTrigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="prac_respTrigger_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="keys_counted = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#clear out the keys_counbted variable at the start of the trial&amp;#10;#this variable will hold the keys that have had eeg triggers thrown&amp;#10;#already within a given trial.&amp;#10;keys_counted = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if prac_stim_keyResp.keys and len(prac_stim_keyResp.keys) &gt; len(keys_counted):# A key response has been made but we haven't yet &quot;counted&quot; it&amp;#10;    keys_counted.append(prac_stim_keyResp.keys[-1]) #add this response to list of keys pressed this trial (-1 is the last position)&amp;#10;    if len(prac_stim_keyResp.keys) &lt; 2: #if this is  the first response&amp;#10;        if prac_stim_keyResp.keys[-1] == '1':&amp;#10;            if target == 'left': #correct response&amp;#10;                port.write([0x0B]) # 11&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'right': #error response&amp;#10;                port.write([0x0C])# 12&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;        elif prac_stim_keyResp.keys[-1] == '8':&amp;#10;            if target == 'right': #correct response&amp;#10;                port.write([0x0B]) # 11&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'left': #error response&amp;#10;                port.write([0x0C])# 12&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;    elif len(prac_stim_keyResp.keys) &gt;= 2: #if this is NOT the first response&amp;#10;        if prac_stim_keyResp.keys[-1] == '1':&amp;#10;            if target == 'left': #technically correct response, but not the first response made&amp;#10;                port.write([0x15]) # 21&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'right': #technically error response, but not the first response made&amp;#10;                port.write([0x16])# 22&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;        elif prac_stim_keyResp.keys[-1] == '8':&amp;#10;            if target == 'right': #technically correct response, but not the first response made&amp;#10;                port.write([0x15]) # 21&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'left': #technically error response, but not the first response made&amp;#10;                port.write([0x16])# 22&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((prac_stim_keyResp.keys &amp;&amp; (prac_stim_keyResp.keys.length &gt; keys_counted.length))) {&amp;#10;    keys_counted.push(prac_stim_keyResp.keys.slice((- 1))[0]);&amp;#10;    if ((prac_stim_keyResp.keys.length &lt; 2)) {&amp;#10;        if ((prac_stim_keyResp.keys.slice((- 1))[0] === &quot;1&quot;)) {&amp;#10;            if ((target === &quot;left&quot;)) {&amp;#10;                port.write([11]);&amp;#10;                time.sleep(PulseWidth);&amp;#10;                port.write([0]);&amp;#10;            } else {&amp;#10;                if ((target === &quot;right&quot;)) {&amp;#10;                    port.write([12]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((prac_stim_keyResp.keys.slice((- 1))[0] === &quot;8&quot;)) {&amp;#10;                if ((target === &quot;right&quot;)) {&amp;#10;                    port.write([11]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                } else {&amp;#10;                    if ((target === &quot;left&quot;)) {&amp;#10;                        port.write([12]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((prac_stim_keyResp.keys.length &gt;= 2)) {&amp;#10;            if ((prac_stim_keyResp.keys.slice((- 1))[0] === &quot;1&quot;)) {&amp;#10;                if ((target === &quot;left&quot;)) {&amp;#10;                    port.write([21]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                } else {&amp;#10;                    if ((target === &quot;right&quot;)) {&amp;#10;                        port.write([22]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((prac_stim_keyResp.keys.slice((- 1))[0] === &quot;8&quot;)) {&amp;#10;                    if ((target === &quot;right&quot;)) {&amp;#10;                        port.write([21]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    } else {&amp;#10;                        if ((target === &quot;left&quot;)) {&amp;#10;                            port.write([22]);&amp;#10;                            time.sleep(PulseWidth);&amp;#10;                            port.write([0]);&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_respTrigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prac_blockFeed">
      <CodeComponent name="prac_blockFeed_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="blockAcc = (numCorr / trialNum);&amp;#10;if ((blockAcc &gt;= FL_THRESH)) {&amp;#10;    outPut = &quot;Well done! Now you are ready to play the real game!&quot;;&amp;#10;    prac_block_loop.finished = true;&amp;#10;} else {&amp;#10;    if ((blockAcc &lt;= FL_THRESH)) {&amp;#10;        outPut = &quot;Please try the practice again&quot;;&amp;#10;        prac_block_loop.finished = false;&amp;#10;    }&amp;#10;}&amp;#10;prac_block_loop.addData(&quot;prac_flanker_blockAcc&quot;, blockAcc);&amp;#10;trialNum = 0;&amp;#10;numCorr = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="blockAcc = numCorr / trialNum # compute accuracy for this block&amp;#10;&amp;#10;if blockAcc &gt;= FL_THRESH: # if accuracy &gt;= threshold then say practice is complete and end practice loop to continue to main exp&amp;#10;    outPut = 'Well done! Now you are ready to play the real game!' #feedback presented&amp;#10;    prac_block_loop.finished = True #end practice loop to continue to main exp&amp;#10;elif blockAcc &lt;= FL_THRESH: # if accuracy &lt; threshold then say that practice needs to be repeated and DO NOT end practice loop, instead, allow it to repeat&amp;#10;    outPut = 'Please try the practice again' #feedback presented&amp;#10;    prac_block_loop.finished = False #DO NOT end practice loop and allow to repeat&amp;#10;&amp;#10;prac_block_loop.addData('prac_flanker_blockAcc', blockAcc)&amp;#10;&amp;#10;# reset the following variables to zero before the next practice block starts&amp;#10;trialNum = 0&amp;#10;numCorr = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((prac_blockFeed_keyResp.keys.slice((- 1))[0] === &quot;s&quot;)) {&amp;#10;    prac_block_loop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if prac_blockFeed_keyResp.keys[-1] == 's':&amp;#10;    prac_block_loop.finished = True #end practice loop to continue to main exp" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="prac_blockFeed_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="prac_blockFeed_text_3">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="code" updates="constant" name="letterHeight"/>
        <Param val="prac_blockFeed_text_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$outPut" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="prac_pressContinue_3">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="prac_pressContinue_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -.3)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Experimenter: press key to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="prac_blockFeed_keyResp">
        <Param val="'c','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="prac_blockFeed_keyResp" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="task_condition">
      <CodeComponent name="task_blockReminder_code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="blockCounter = (blockCounter + 1);&amp;#10;if ((blockCounter === 1)) {&amp;#10;    blockNumText = &quot;Block 1 of 6&quot;;&amp;#10;} else {&amp;#10;    if ((blockCounter === 2)) {&amp;#10;        blockNumText = &quot;Block 2 of 6&quot;;&amp;#10;    } else {&amp;#10;        if ((blockCounter === 3)) {&amp;#10;            blockNumText = &quot;Block 3 of 6&quot;;&amp;#10;        } else {&amp;#10;            if ((blockCounter === 4)) {&amp;#10;                blockNumText = &quot;Block 4 of 6&quot;;&amp;#10;            } else {&amp;#10;                if ((blockCounter === 5)) {&amp;#10;                    blockNumText = &quot;Block 5 of 6&quot;;&amp;#10;                } else {&amp;#10;                    if ((blockCounter === 6)) {&amp;#10;                        blockNumText = &quot;Block 6 of 6&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#if endCondition: # skip all trials for this condition; participant will not play game.&amp;#10;#    task_block_loop.finished = True&amp;#10;#    continueRoutine = False&amp;#10;&amp;#10;blockCounter = blockCounter +1&amp;#10;&amp;#10;if blockCounter == 1:&amp;#10;    blockNumText = 'Block 1 of 6'&amp;#10;elif blockCounter == 2:&amp;#10;    blockNumText = 'Block 2 of 6'&amp;#10;elif blockCounter == 3:&amp;#10;    blockNumText = 'Block 3 of 6'&amp;#10;elif blockCounter == 4:&amp;#10;    blockNumText = 'Block 4 of 6'&amp;#10;elif blockCounter == 5:&amp;#10;    blockNumText = 'Block 5 of 6'&amp;#10;elif blockCounter == 6:&amp;#10;    blockNumText = 'Block 6 of 6'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="task_blockReminder_code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="task_blockText_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="num" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="task_blockText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, .4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="num" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="num" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="num" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$blockNumText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="condition_reminder_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="condition_reminder_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Respond as quickly as you can without making mistakes. Only respond once each time you see the numbers appear. Even if you think you made the wrong response, do not respond again until you see the next set of numbers appear.&amp;#10;&amp;#10;Always respond whether the MIDDLE number is lesser or greater than 5. &amp;#10;&amp;#10;Remember not to say any of the numbers out loud. To get ready, rest your thumbs on the right and left buttons.&amp;#10;&amp;#10;Press the right button to begin" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_11">
        <Param val="'8'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_11" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="eeg_trigger_check_2">
      <CodeComponent name="triggerCheck_code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#initialize usb connected variable&amp;#10;usbConnected = 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="try {&amp;#10;    port.close();&amp;#10;    port.open();&amp;#10;    usbConnected = 1;&amp;#10;    continueRoutine = false;&amp;#10;} catch(e) {&amp;#10;    usbConnected = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#(re)open trigger port. This is done in case the connection failed,&amp;#10;#in which case triggers will no longer be sent until the port is reopened.&amp;#10;&amp;#10;#At start of routine, we try to close/open the port. This will usually be&amp;#10;#succesful, causing us to end the routine altogether. However, it will fail if &amp;#10;#the usb is unplugged. In this latter case, the routine will then run code each&amp;#10;#frame to constantly check for the usb being plugged back in, before continuing.&amp;#10;&amp;#10;try: &amp;#10;#if usb connected, port will close/open and routine will end&amp;#10;    port.close()&amp;#10;    port.open()&amp;#10;    usbConnected = 1 #if successful, set usbConnectd to 1&amp;#10;    continueRoutine = False #if successful, end the routine&amp;#10;&amp;#10;except: #if port close/open fails, then set usbConnected to 0. Routine will loop each frame until fixed.&amp;#10;    usbConnected = 0 #if failure, set usbConnected to 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#if the usb is not connected, then keep trying to open port to determine when it has been reconnected.&amp;#10;if usbConnected == 0:&amp;#10;    &amp;#10;    try: &amp;#10;        #if usb connected, port will close/open and routine will end&amp;#10;        port.close()&amp;#10;        port.open()&amp;#10;        usbConnected = 1 #if successful, set usbConnectd to 1&amp;#10;        #send trigger to indicate that there was a connection issue that is now resolved&amp;#10;        port.write([0x63]) #hexcode = 99; eeg trigger sent&amp;#10;        time.sleep(PulseWidth) #how long to wait before clearing trigger port&amp;#10;        port.write([0x00]) #clear trigger port by sending hexcode = 0&amp;#10;        #if successful, end the routine&amp;#10;        continueRoutine = False&amp;#10;    &amp;#10;    except: #if usb not connected, routine will continue (keep checking port and keep showing message)&amp;#10;        usbConnected = 0 #if failure, set usbConnectd to 0&amp;#10;        time.sleep(0.5) #wait .5 secs before checking again, to not overload the system" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((usbConnected === 0)) {&amp;#10;    try {&amp;#10;        port.close();&amp;#10;        port.open();&amp;#10;        usbConnected = 1;&amp;#10;        port.write([99]);&amp;#10;        time.sleep(PulseWidth);&amp;#10;        port.write([0]);&amp;#10;        continueRoutine = false;&amp;#10;    } catch(e) {&amp;#10;        usbConnected = 0;&amp;#10;        time.sleep(0.5);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="triggerCheck_code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="triggerIssue_text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="triggerIssue_text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="EEG EQUIPMENT ISSUE: please ring bell for experimenter" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="supertrial_initFixation">
      <CodeComponent name="endTask_code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ISIRange = np.linspace(2600, 3000, 400);&amp;#10;util.shuffle(ISIRange);&amp;#10;thisISI = (ISIRange[0] / 1000);&amp;#10;task_condition_loop.addData(&quot;ISI_fixation&quot;, thisISI);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# make range from a to b in n stepsizes&amp;#10;ISIRange = np.linspace(2600, 3000, 400)&amp;#10;&amp;#10;# picking from a shuffled array is easier for random selection in JS&amp;#10;shuffle(ISIRange)&amp;#10;thisISI = ISIRange[0]/1000 # the first item of the shuffled array &amp;#10;&amp;#10;# save this ISI to our output file&amp;#10;task_condition_loop.addData('ISI_fixation', thisISI)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="endTask_code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="initFixation_img_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="img/fixationCross.png" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="initFixation_img_5" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CROSS_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(.24, .24)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="task_stimRoutine">
      <CodeComponent name="flanker_numbers_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# take flanker letter and add to used flanker letters&amp;#10;flanker_stim_large = NUMBERS_LARGE.copy()&amp;#10;flanker_stim_small = NUMBERS_SMALL.copy()&amp;#10;shuffle(flanker_stim_large)&amp;#10;shuffle(flanker_stim_small)&amp;#10;&amp;#10;# create flanker stimuli based on the congruency and case&amp;#10;if congruent == 1 and target == &quot;large&quot;:&amp;#10;    flanker_stim = &quot;{}&quot;.format(flanker_stim_large[0]*5)&amp;#10;elif congruent == 1 and target == &quot;small&quot;:&amp;#10;    flanker_stim = &quot;{}&quot;.format(flanker_stim_small[0]*5)&amp;#10;elif congruent == 0 and target == &quot;large&quot;:&amp;#10;    flanker_stim = &quot;{}{}{}&quot;.format(flanker_stim_small[0]*2,&amp;#10;    flanker_stim_large[0], flanker_stim_small[0]*2)&amp;#10;elif congruent == 0 and target == &quot;small&quot;:&amp;#10;    flanker_stim = &quot;{}{}{}&quot;.format(flanker_stim_large[0]*2,&amp;#10;    flanker_stim_small[0], flanker_stim_large[0]*2)&amp;#10;else: flanker_stim = &quot;error&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="task_trial_loop.addData(&quot;flanker_stim&quot;, flanker_stim);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# write flanker stimuli to data&amp;#10;task_trial_loop.addData('flanker_stim',&amp;#10;flanker_stim)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="flanker_numbers_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="task_isi_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ISIRange = linspace(1000, 1500, 500);&amp;#10;shuffle(ISIRange);&amp;#10;thisISI = (ISIRange[0] / 1000);&amp;#10;console.log(&quot;thisISI: &quot;, thisISI);&amp;#10;trials.addData(&quot;ISI&quot;, thisISI);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# pick the ISI for the next routine&amp;#10;# for the online version, this code component should be set to 'both' to remove the 'np'&amp;#10;# at the start of np.linspace (this is a python library JS won't know what to call. &amp;#10;&amp;#10;# make range from a to b in n stepsizes&amp;#10;ISIRange = np.linspace(1300, 1800, 500)&amp;#10;&amp;#10;# picking from a shuffled array is easier for random selection in JS&amp;#10;shuffle(ISIRange)&amp;#10;thisISI = ISIRange[0]/1000 # the first item of the shuffled array &amp;#10;&amp;#10;# save this ISI to our output file&amp;#10;task_trial_loop.addData('ISI', thisISI)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="task_isi_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="flanker_text_stim">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="flanker_text_stim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$flanker_stim" valType="str" updates="set every repeat" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="task_fixImg">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="img/fixationCross.png" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="task_fixImg" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CROSS_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(.24, .24)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="task_stim_keyResp">
        <Param val="'1','8'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="task_stim_keyResp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$thisISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="all keys" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="task_accuracy_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trialNum = (trialNum + 1);&amp;#10;if (task_stim_keyResp.keys) {&amp;#10;    if ((task_stim_keyResp.keys[0] === &quot;1&quot;)) {&amp;#10;        if ((target === &quot;small&quot;)) {&amp;#10;            accuracy = 1;&amp;#10;            numCorr = (numCorr + 1);&amp;#10;        } else {&amp;#10;            if ((target === &quot;large&quot;)) {&amp;#10;                accuracy = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((task_stim_keyResp.keys[0] === &quot;8&quot;)) {&amp;#10;            if ((target === &quot;large&quot;)) {&amp;#10;                accuracy = 1;&amp;#10;                numCorr = (numCorr + 1);&amp;#10;            } else {&amp;#10;                if ((target === &quot;small&quot;)) {&amp;#10;                    accuracy = 0;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;task_trial_loop.addData(&quot;fl_accuracy&quot;, accuracy);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="#iterate trial number for this block&amp;#10;trialNum = trialNum + 1&amp;#10;&amp;#10;if task_stim_keyResp.keys: #if at least one response was made this trial&amp;#10;    if task_stim_keyResp.keys[0] == '1': #if the FIRST button pressed was a '1'&amp;#10;        if target == 'small': #if a left target stim was shown this trial&amp;#10;            accuracy = 1 #mark this trial as correct&amp;#10;            numCorr = numCorr +1 #iterate number of correct responses for this supertrial&amp;#10;        elif target == 'large': #if a right target stim was shown this trial&amp;#10;            accuracy = 0 #mark this trial as an error&amp;#10;    elif task_stim_keyResp.keys[0] == '8': #if the FIRST button pressed was a '8'&amp;#10;        if target == 'large': #if a right target stim was shown this trial&amp;#10;            accuracy = 1 #mark this trial as correct&amp;#10;            numCorr = numCorr +1 #iterate number of correct responses for this supertrial&amp;#10;        elif target == 'small': #if a left target stim was shown this trial&amp;#10;            accuracy = 0 #mark this trial as an error&amp;#10;&amp;#10;# save this trial's accuracy to our output file&amp;#10;task_trial_loop.addData('fl_accuracy', accuracy) " valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="task_accuracy_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="task_stimTrigger_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="stimTriggerSent = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#set stimTriggerSent to false at the start of the trial. this way&amp;#10;#when the stimulus is shown, we can change it to True. This variable&amp;#10;#is used to ensure we only throw the stimulus EEG trigger once.&amp;#10;stimTriggerSent = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#the first if statement below ensures that the subsequent if statements (and throwing of triggers)&amp;#10;#only occurs once per trial. That is, only when the stimulus is presented (.status = STARTED) and&amp;#10;#stimTriggerSent is still False. Once a trigger is sent, we change stimTriggerSent to True so that &amp;#10;#the stimulus eeg trigger will not be sent again for this trial&amp;#10;if task_centerImg.status == STARTED and not stimTriggerSent:&amp;#10;    if stimNum == 41: #code denoting which stimulus array was sent (from excel file)&amp;#10;        stimTriggerSent = True #switch stimTriggerSent to True so that the stimulus eeg trigger will not be sent again this trial&amp;#10;        port.write([0x29]) #hexcode = 41; eeg trigger sent&amp;#10;        time.sleep(PulseWidth) #how long to wait before clearing trigger port&amp;#10;        port.write([0x00]) #clear trigger port by sending hexcode = 0&amp;#10;    elif stimNum == 42:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x2A])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 43:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x2B])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 44:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x2C])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 51: #code denoting which stimulus array was sent (from excel file)&amp;#10;        stimTriggerSent = True #switch stimTriggerSent to True so that the stimulus eeg trigger will not be sent again this trial&amp;#10;        port.write([0x33]) #hexcode = 51; eeg trigger sent&amp;#10;        time.sleep(PulseWidth) #how long to wait before clearing trigger port&amp;#10;        port.write([0x00]) #clear trigger port by sending hexcode = 0&amp;#10;    elif stimNum == 52:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x34])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 53:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x35])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])&amp;#10;    elif stimNum == 54:&amp;#10;        stimTriggerSent = True&amp;#10;        port.write([0x36])&amp;#10;        time.sleep(PulseWidth)&amp;#10;        port.write([0x00])" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((task_centerImg.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimTriggerSent))) {&amp;#10;    if ((stimNum === 41)) {&amp;#10;        stimTriggerSent = true;&amp;#10;        port.write([41]);&amp;#10;        time.sleep(PulseWidth);&amp;#10;        port.write([0]);&amp;#10;    } else {&amp;#10;        if ((stimNum === 42)) {&amp;#10;            stimTriggerSent = true;&amp;#10;            port.write([42]);&amp;#10;            time.sleep(PulseWidth);&amp;#10;            port.write([0]);&amp;#10;        } else {&amp;#10;            if ((stimNum === 43)) {&amp;#10;                stimTriggerSent = true;&amp;#10;                port.write([43]);&amp;#10;                time.sleep(PulseWidth);&amp;#10;                port.write([0]);&amp;#10;            } else {&amp;#10;                if ((stimNum === 44)) {&amp;#10;                    stimTriggerSent = true;&amp;#10;                    port.write([44]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                } else {&amp;#10;                    if ((stimNum === 51)) {&amp;#10;                        stimTriggerSent = true;&amp;#10;                        port.write([51]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    } else {&amp;#10;                        if ((stimNum === 52)) {&amp;#10;                            stimTriggerSent = true;&amp;#10;                            port.write([52]);&amp;#10;                            time.sleep(PulseWidth);&amp;#10;                            port.write([0]);&amp;#10;                        } else {&amp;#10;                            if ((stimNum === 53)) {&amp;#10;                                stimTriggerSent = true;&amp;#10;                                port.write([53]);&amp;#10;                                time.sleep(PulseWidth);&amp;#10;                                port.write([0]);&amp;#10;                            } else {&amp;#10;                                if ((stimNum === 54)) {&amp;#10;                                    stimTriggerSent = true;&amp;#10;                                    port.write([54]);&amp;#10;                                    time.sleep(PulseWidth);&amp;#10;                                    port.write([0]);&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="task_stimTrigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="task_respTrigger_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="keys_counted = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#clear out the keys_counbted variable at the start of the trial&amp;#10;#this variable will hold the keys that have had eeg triggers thrown&amp;#10;#already within a given trial.&amp;#10;keys_counted = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if task_stim_keyResp.keys and len(task_stim_keyResp.keys) &gt; len(keys_counted):# A key response has been made but we haven't yet &quot;counted&quot; it&amp;#10;    keys_counted.append(task_stim_keyResp.keys[-1]) #add this response to list of keys pressed this trial&amp;#10;    if len(task_stim_keyResp.keys) &lt; 2: #if this is  the first response&amp;#10;        if task_stim_keyResp.keys[-1] == '1':&amp;#10;            if target == 'left': #correct response&amp;#10;                port.write([0x0B]) # 11&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'right': #error response&amp;#10;                port.write([0x0C])# 12&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;        elif task_stim_keyResp.keys[-1] == '8':&amp;#10;            if target == 'right': #correct response&amp;#10;                port.write([0x0B]) # 11&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'left': #error response&amp;#10;                port.write([0x0C])# 12&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;    elif len(task_stim_keyResp.keys) &gt;= 2: #if this is NOT the first response&amp;#10;        if task_stim_keyResp.keys[-1] == '1':&amp;#10;            if target == 'left': #technically correct response, but not the first response made&amp;#10;                port.write([0x15]) # 21&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'right': #technically error response, but not the first response made&amp;#10;                port.write([0x16])# 22&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;        elif task_stim_keyResp.keys[-1] == '8':&amp;#10;            if target == 'right': #technically correct response, but not the first response made&amp;#10;                port.write([0x15]) # 21&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])&amp;#10;            elif target == 'left': #technically error response, but not the first response made&amp;#10;                port.write([0x16])# 22&amp;#10;                time.sleep(PulseWidth)&amp;#10;                port.write([0x00])" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((task_stim_keyResp.keys &amp;&amp; (task_stim_keyResp.keys.length &gt; keys_counted.length))) {&amp;#10;    keys_counted.push(task_stim_keyResp.keys.slice((- 1))[0]);&amp;#10;    if ((task_stim_keyResp.keys.length &lt; 2)) {&amp;#10;        if ((task_stim_keyResp.keys.slice((- 1))[0] === &quot;1&quot;)) {&amp;#10;            if ((target === &quot;left&quot;)) {&amp;#10;                port.write([11]);&amp;#10;                time.sleep(PulseWidth);&amp;#10;                port.write([0]);&amp;#10;            } else {&amp;#10;                if ((target === &quot;right&quot;)) {&amp;#10;                    port.write([12]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((task_stim_keyResp.keys.slice((- 1))[0] === &quot;8&quot;)) {&amp;#10;                if ((target === &quot;right&quot;)) {&amp;#10;                    port.write([11]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                } else {&amp;#10;                    if ((target === &quot;left&quot;)) {&amp;#10;                        port.write([12]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((task_stim_keyResp.keys.length &gt;= 2)) {&amp;#10;            if ((task_stim_keyResp.keys.slice((- 1))[0] === &quot;1&quot;)) {&amp;#10;                if ((target === &quot;left&quot;)) {&amp;#10;                    port.write([21]);&amp;#10;                    time.sleep(PulseWidth);&amp;#10;                    port.write([0]);&amp;#10;                } else {&amp;#10;                    if ((target === &quot;right&quot;)) {&amp;#10;                        port.write([22]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((task_stim_keyResp.keys.slice((- 1))[0] === &quot;8&quot;)) {&amp;#10;                    if ((target === &quot;right&quot;)) {&amp;#10;                        port.write([21]);&amp;#10;                        time.sleep(PulseWidth);&amp;#10;                        port.write([0]);&amp;#10;                    } else {&amp;#10;                        if ((target === &quot;left&quot;)) {&amp;#10;                            port.write([22]);&amp;#10;                            time.sleep(PulseWidth);&amp;#10;                            port.write([0]);&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="task_respTrigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="task_conditionComplete">
      <CodeComponent name="stimTask_code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="fl_accuracy = (numCorr / trialNum);&amp;#10;task_condition_loop.addData(&quot;block_accuracy&quot;, fl_accuracy);&amp;#10;trialNum = 0;&amp;#10;numCorr = 0;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# save this trial's flanker accuracy to our output file&amp;#10;fl_accuracy = numCorr / trialNum&amp;#10;task_condition_loop.addData('block_accuracy', fl_accuracy)&amp;#10;&amp;#10;# reset&amp;#10;trialNum = 0&amp;#10;numCorr = 0" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="stimTask_code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="conditionComplete_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="conditionComplete_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press the right button to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_13">
        <Param val="'8'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_13" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="task_finish">
      <TextComponent name="taskComplete_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="taskComplete_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for participating!&amp;#10;&amp;#10;Please ring the bell for your experimenter." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.3" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="space_end_keyResp_12">
        <Param val="'c'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="space_end_keyResp_12" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="JS_code"/>
    <Routine name="setup"/>
    <Routine name="instructMiddle"/>
    <Routine name="instructLeft"/>
    <Routine name="instructRight"/>
    <Routine name="instructionLeft"/>
    <Routine name="instructionRight"/>
    <Routine name="respond_onceInstruct"/>
    <LoopInitiator loopType="TrialHandler" name="prac_block_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="prac_block_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="eeg_trigger_check"/>
    <Routine name="prac_blockReminders"/>
    <Routine name="prac_initFixation"/>
    <LoopInitiator loopType="TrialHandler" name="prac_trial_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'stimNum': 1, 'congruent': 1, 'target': 'small'}, {'stimNum': 2, 'congruent': 1, 'target': 'large'}, {'stimNum': 3, 'congruent': 0, 'target': 'small'}, {'stimNum': 4, 'congruent': 0, 'target': 'large'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="prac_trials.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="10" valType="num"/>
      <Param name="name" updates="None" val="prac_trial_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_stimRoutine"/>
    <LoopTerminator name="prac_trial_loop"/>
    <Routine name="prac_blockFeed"/>
    <LoopTerminator name="prac_block_loop"/>
    <LoopInitiator loopType="TrialHandler" name="task_condition_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="6" valType="num"/>
      <Param name="name" updates="None" val="task_condition_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="task_condition"/>
    <Routine name="eeg_trigger_check_2"/>
    <Routine name="supertrial_initFixation"/>
    <LoopInitiator loopType="TrialHandler" name="task_trial_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'stimNum': 41, 'congruent': 1, 'target': 'small'}, {'stimNum': 42, 'congruent': 1, 'target': 'large'}, {'stimNum': 43, 'congruent': 0, 'target': 'small'}, {'stimNum': 44, 'congruent': 0, 'target': 'large'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="4.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="10" valType="num"/>
      <Param name="name" updates="None" val="task_trial_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="task_stimRoutine"/>
    <LoopTerminator name="task_trial_loop"/>
    <Routine name="task_conditionComplete"/>
    <LoopTerminator name="task_condition_loop"/>
    <Routine name="task_finish"/>
  </Flow>
</PsychoPy2experiment>
